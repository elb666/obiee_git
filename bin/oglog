#!/bin/bash
# oglog
# Requirements:
#	lib-rpd.sh must be accessible in PROGDIR/../lib/
# 
# By: Eric Brown eric_brown@harvard.edu
# ===================================================================== #

usage()
{
    cat <<-EOF
	Usage: $PROGNAME [OPTION] [git-log args]
	
	OBIEE Git Log is 'git log --name-status' with rpd xml filenames 
	replaced with the human readable name of the object they represent.
	Optional git-log arguments will be passed to git log.
	Options:
	  -h                       show this message and exit
	  -f                       show filename with object name
	Examples:
	  $PROGNAME -f -3          
	                           return the last 3 commits with filenames
	  $PROGNAME --all -- dir/  
	                           return all commits that touch directory dir
	  $PROGNAME --decorate
	                           include branch names
EOF
}


getoptions()
{
	O_SHOWFILE=
	GITOPTS=

	if [[ $1 = "-h" ]]; then
		usage
		exit
	elif [[ $1 = "-f" ]]; then
		O_SHOWFILE=1
		shift
	fi

	GITOPTS="$@"
}

bail()
{
	echo "ERROR: " "$1" >&2
	echo "Aborting ${PROGNAME}." >&2
	exit ${2:-$E_DEFAULT}
}

setglobalvars()
{
	ARG0="$0"

	while [[ -h $ARG0 ]]; do
		ARG0="$(readlink "$ARG0")"
	done

	PROGNAME="${ARG0##*/}"
	PROGDIR="${ARG0%/*}"

	# Exit status codes
	SUCCESS=0
	E_DEFAULT=1
	E_ENVIRONMENT=99

	getoptions "$@"

	# make sure we're inside a git repo
	git rev-parse -q > /dev/null 2>&1 || \
		bail "$PROGNAME must be run inside a git repo." $E_DEFAULT

	# Source helpful functions 
	. $PROGDIR/../lib/lib-rpd.sh || \
		bail "Failed to source lib-rpd.sh" $E_ENVIRONMENT

}

main()
{
	_commitregexp="[[:xdigit:]]{40}"

	while IFS= read  line; do
		_obj=
		_objqname=
		_objstatus=
		_newline=


		if [[ $line =~ $_commitregexp ]]; then
			_commit=${BASH_REMATCH[0]}
		fi
		
		# extract rpd file path from line if there is an rpd file path
		_obj="$(extractobj "$line")"

		if [[ $_obj ]]; then
		# looking for lines that look like
		# M   ad9a4360-0c5d-1000-b54b-0a2004f70000.xml
		# so obj status (i.e. A, M or D) is the first letter
		# the colon.  extract the object status from the line:
			_objstatus="${line:0:1}"

			if [[ $_objstatus != D ]]; then  # if the file wasn't 
                                         # deleted then read name from commit
				_newline="$(replacepathwobjqname "$line" "$_commit")"
				_objtype="$(getobjtype "$_obj" "$_commit")"
			else       # otherwise it has been deleted 
				   # so try to read it from _commit's parents
				for ref in $(git rev-parse "$_commit"^@); do
					replacepathwobjqname "$line" "$ref" > /dev/null
					[[ $? ]] || continue
					_newline="$(replacepathwobjqname "$line" "$ref")"
					_objtype="$(getobjtype "$_obj" "$ref")"
					break
				done
			fi

		else
			_newline="$line"
		fi

		# print objtype if it is different than previous 
		# pass through loop
		if [[ $_objtype != $OBJECT_TYPE_OLD ]]; then
			echo "    $_objtype"
		fi

		# print the line
		echo -e "$_newline"

		# if showfile, then print the filename
		if [[ $O_SHOWFILE = 1 ]] && [[ $_obj ]]; then
			echo -e "            $_obj"
		fi

		OBJECT_TYPE_OLD="$_objtype"

	done  < <(git log --color --name-status $GITOPTS) | less -r -X

	exit
}

setglobalvars "$@"

main
